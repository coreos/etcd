// Code generated by protoc-gen-gogo.
// source: snapshot_response.proto
// DO NOT EDIT!

package protobuf

import testing56 "testing"
import math_rand56 "math/rand"
import time56 "time"
import code_google_com_p_gogoprotobuf_proto32 "github.com/coreos/etcd/third_party/code.google.com/p/gogoprotobuf/proto"
import testing57 "testing"
import math_rand57 "math/rand"
import time57 "time"
import encoding_json8 "encoding/json"
import testing58 "testing"
import math_rand58 "math/rand"
import time58 "time"
import code_google_com_p_gogoprotobuf_proto33 "github.com/coreos/etcd/third_party/code.google.com/p/gogoprotobuf/proto"
import math_rand59 "math/rand"
import time59 "time"
import testing59 "testing"
import fmt16 "fmt"
import math_rand60 "math/rand"
import time60 "time"
import testing60 "testing"
import code_google_com_p_gogoprotobuf_proto34 "github.com/coreos/etcd/third_party/code.google.com/p/gogoprotobuf/proto"
import math_rand61 "math/rand"
import time61 "time"
import testing61 "testing"
import fmt17 "fmt"
import go_parser8 "go/parser"
import math_rand62 "math/rand"
import time62 "time"
import testing62 "testing"
import code_google_com_p_gogoprotobuf_proto35 "github.com/coreos/etcd/third_party/code.google.com/p/gogoprotobuf/proto"

func TestSnapshotResponseProto(t *testing56.T) {
	popr := math_rand56.New(math_rand56.NewSource(time56.Now().UnixNano()))
	p := NewPopulatedSnapshotResponse(popr, false)
	data, err := code_google_com_p_gogoprotobuf_proto32.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &SnapshotResponse{}
	if err := code_google_com_p_gogoprotobuf_proto32.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestSnapshotResponseMarshalTo(t *testing56.T) {
	popr := math_rand56.New(math_rand56.NewSource(time56.Now().UnixNano()))
	p := NewPopulatedSnapshotResponse(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &SnapshotResponse{}
	if err := code_google_com_p_gogoprotobuf_proto32.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkSnapshotResponseProtoMarshal(b *testing56.B) {
	popr := math_rand56.New(math_rand56.NewSource(616))
	total := 0
	pops := make([]*SnapshotResponse, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedSnapshotResponse(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := code_google_com_p_gogoprotobuf_proto32.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkSnapshotResponseProtoUnmarshal(b *testing56.B) {
	popr := math_rand56.New(math_rand56.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := code_google_com_p_gogoprotobuf_proto32.Marshal(NewPopulatedSnapshotResponse(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &SnapshotResponse{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := code_google_com_p_gogoprotobuf_proto32.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestSnapshotResponseJSON(t *testing57.T) {
	popr := math_rand57.New(math_rand57.NewSource(time57.Now().UnixNano()))
	p := NewPopulatedSnapshotResponse(popr, true)
	jsondata, err := encoding_json8.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &SnapshotResponse{}
	err = encoding_json8.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestSnapshotResponseProtoText(t *testing58.T) {
	popr := math_rand58.New(math_rand58.NewSource(time58.Now().UnixNano()))
	p := NewPopulatedSnapshotResponse(popr, true)
	data := code_google_com_p_gogoprotobuf_proto33.MarshalTextString(p)
	msg := &SnapshotResponse{}
	if err := code_google_com_p_gogoprotobuf_proto33.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestSnapshotResponseProtoCompactText(t *testing58.T) {
	popr := math_rand58.New(math_rand58.NewSource(time58.Now().UnixNano()))
	p := NewPopulatedSnapshotResponse(popr, true)
	data := code_google_com_p_gogoprotobuf_proto33.CompactTextString(p)
	msg := &SnapshotResponse{}
	if err := code_google_com_p_gogoprotobuf_proto33.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestSnapshotResponseStringer(t *testing59.T) {
	popr := math_rand59.New(math_rand59.NewSource(time59.Now().UnixNano()))
	p := NewPopulatedSnapshotResponse(popr, false)
	s1 := p.String()
	s2 := fmt16.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestSnapshotResponseSize(t *testing60.T) {
	popr := math_rand60.New(math_rand60.NewSource(time60.Now().UnixNano()))
	p := NewPopulatedSnapshotResponse(popr, true)
	size2 := code_google_com_p_gogoprotobuf_proto34.Size(p)
	data, err := code_google_com_p_gogoprotobuf_proto34.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := code_google_com_p_gogoprotobuf_proto34.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkSnapshotResponseSize(b *testing60.B) {
	popr := math_rand60.New(math_rand60.NewSource(616))
	total := 0
	pops := make([]*SnapshotResponse, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedSnapshotResponse(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestSnapshotResponseGoString(t *testing61.T) {
	popr := math_rand61.New(math_rand61.NewSource(time61.Now().UnixNano()))
	p := NewPopulatedSnapshotResponse(popr, false)
	s1 := p.GoString()
	s2 := fmt17.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser8.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestSnapshotResponseVerboseEqual(t *testing62.T) {
	popr := math_rand62.New(math_rand62.NewSource(time62.Now().UnixNano()))
	p := NewPopulatedSnapshotResponse(popr, false)
	data, err := code_google_com_p_gogoprotobuf_proto35.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &SnapshotResponse{}
	if err := code_google_com_p_gogoprotobuf_proto35.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}

//These tests are generated by code.google.com/p/gogoprotobuf/plugin/testgen
