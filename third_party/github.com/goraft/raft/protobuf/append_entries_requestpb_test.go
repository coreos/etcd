// Code generated by protoc-gen-gogo.
// source: append_entries_request.proto
// DO NOT EDIT!

/*
Package protobuf is a generated protocol buffer package.

It is generated from these files:
	append_entries_request.proto
	append_entries_responses.proto
	log_entry.proto
	request_vote_request.proto
	request_vote_responses.proto
	snapshot_recovery_request.proto
	snapshot_recovery_response.proto
	snapshot_request.proto
	snapshot_response.proto

It has these top-level messages:
	AppendEntriesRequest
*/
package protobuf

import testing7 "testing"
import math_rand7 "math/rand"
import time7 "time"
import code_google_com_p_gogoprotobuf_proto4 "github.com/coreos/etcd/third_party/code.google.com/p/gogoprotobuf/proto"
import testing8 "testing"
import math_rand8 "math/rand"
import time8 "time"
import encoding_json1 "encoding/json"
import testing9 "testing"
import math_rand9 "math/rand"
import time9 "time"
import code_google_com_p_gogoprotobuf_proto5 "github.com/coreos/etcd/third_party/code.google.com/p/gogoprotobuf/proto"
import math_rand10 "math/rand"
import time10 "time"
import testing10 "testing"
import fmt2 "fmt"
import math_rand11 "math/rand"
import time11 "time"
import testing11 "testing"
import code_google_com_p_gogoprotobuf_proto6 "github.com/coreos/etcd/third_party/code.google.com/p/gogoprotobuf/proto"
import math_rand12 "math/rand"
import time12 "time"
import testing12 "testing"
import fmt3 "fmt"
import go_parser1 "go/parser"
import math_rand13 "math/rand"
import time13 "time"
import testing13 "testing"
import code_google_com_p_gogoprotobuf_proto7 "github.com/coreos/etcd/third_party/code.google.com/p/gogoprotobuf/proto"

func TestAppendEntriesRequestProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedAppendEntriesRequest(popr, false)
	data, err := code_google_com_p_gogoprotobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &AppendEntriesRequest{}
	if err := code_google_com_p_gogoprotobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestAppendEntriesRequestMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedAppendEntriesRequest(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &AppendEntriesRequest{}
	if err := code_google_com_p_gogoprotobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkAppendEntriesRequestProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*AppendEntriesRequest, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedAppendEntriesRequest(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := code_google_com_p_gogoprotobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkAppendEntriesRequestProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := code_google_com_p_gogoprotobuf_proto4.Marshal(NewPopulatedAppendEntriesRequest(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &AppendEntriesRequest{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := code_google_com_p_gogoprotobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestAppendEntriesRequestJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedAppendEntriesRequest(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &AppendEntriesRequest{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestAppendEntriesRequestProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedAppendEntriesRequest(popr, true)
	data := code_google_com_p_gogoprotobuf_proto5.MarshalTextString(p)
	msg := &AppendEntriesRequest{}
	if err := code_google_com_p_gogoprotobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestAppendEntriesRequestProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedAppendEntriesRequest(popr, true)
	data := code_google_com_p_gogoprotobuf_proto5.CompactTextString(p)
	msg := &AppendEntriesRequest{}
	if err := code_google_com_p_gogoprotobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestAppendEntriesRequestStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedAppendEntriesRequest(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestAppendEntriesRequestSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedAppendEntriesRequest(popr, true)
	size2 := code_google_com_p_gogoprotobuf_proto6.Size(p)
	data, err := code_google_com_p_gogoprotobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := code_google_com_p_gogoprotobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkAppendEntriesRequestSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*AppendEntriesRequest, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedAppendEntriesRequest(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestAppendEntriesRequestGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedAppendEntriesRequest(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestAppendEntriesRequestVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedAppendEntriesRequest(popr, false)
	data, err := code_google_com_p_gogoprotobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &AppendEntriesRequest{}
	if err := code_google_com_p_gogoprotobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}

//These tests are generated by code.google.com/p/gogoprotobuf/plugin/testgen
