#!/usr/bin/env bash
#
# Run all etcd tests
# ./test
# ./test -v
#
# Run tests for one package
#
# PKG=./wal ./test
# PKG=snap ./test
set -e

# Invoke ./cover for HTML output
COVER=${COVER:-"-cover"}

source ./build

# Hack: gofmt ./ will recursively check the .git directory. So use *.go for gofmt.
TESTABLE_AND_FORMATTABLE="client discovery error etcdctl/command etcdmain etcdserver etcdserver/auth etcdserver/etcdhttp etcdserver/etcdhttp/httptypes pkg/fileutil pkg/flags pkg/idutil pkg/ioutil pkg/netutil pkg/osutil pkg/pbutil pkg/types pkg/transport pkg/wait proxy raft snap storage storage/backend store version wal"
# TODO: add it to race testing when the issue is resolved
# https://github.com/golang/go/issues/9946
NO_RACE_TESTABLE="rafthttp"
FORMATTABLE="$TESTABLE_AND_FORMATTABLE $NO_RACE_TESTABLE *.go etcdctl/ integration"

# user has not provided PKG override
if [ -z "$PKG" ]; then
	TEST=$TESTABLE_AND_FORMATTABLE
	NO_RACE_TEST=$NO_RACE_TESTABLE
	FMT=$FORMATTABLE

# user has provided PKG override
else
	# strip out leading dotslashes and trailing slashes from PKG=./foo/
	TEST=${PKG/#./}
	TEST=${TEST/#\//}
	TEST=${TEST/%\//}

	# only run gofmt on packages provided by user
	FMT="$TEST"
fi

# split TEST into an array and prepend REPO_PATH to each local package
split=(${TEST// / })
TEST=${split[@]/#/${REPO_PATH}/}
split=(${NO_RACE_TEST// / })
NO_RACE_TEST=${split[@]/#/${REPO_PATH}/}

echo "Running tests..."

MACHINE_TYPE=$(uname -m)
if [ $MACHINE_TYPE != "armv7l" ]; then
  RACE="--race"
fi

TEST_COMMAND="go test -timeout 3m ${COVER} ${RACE} -cpu 1,2,4 $@ ${TEST}"
printf "\nTEST_COMMAND: ${TEST_COMMAND}\n"
$TEST_COMMAND
if [ $? -ne 0 ]; then
	STATUS=$?
	echo "[FAILED] TEST_COMMAND"
	if [ $IS_GO_TIP == false ]; then
		exit $STATUS
	fi
fi

TEST_COMMAND_NO_RACE="go test -timeout 3m ${COVER} -cpu 1,2,4 $@ ${NO_RACE_TEST}"
printf "\nTEST_COMMAND_NO_RACE: ${TEST_COMMAND_NO_RACE}\n"
$TEST_COMMAND_NO_RACE
if [ $? -ne 0 ]; then
	STATUS=$?
	echo "[FAILED] TEST_COMMAND_NO_RACE"
	if [ $IS_GO_TIP == false ]; then
		exit $STATUS
	fi
fi

echo "Checking gofmt..."
if [ $IS_GO_TIP == false ]; then
	fmtRes=$(gofmt -l -s -d $FMT)
	if [ -n "${fmtRes}" ]; then
		echo -e "gofmt checking failed:\n${fmtRes}"
		exit 255
	else
		echo "[OK] gofmt passed!"
	fi
else
	GOFMT_COMMAND="gofmt -l -s -d ${FMT}"	
	$GOFMT_COMMAND || STATUS=$?
	if [ $STATUS -ne 0 ]; then
		echo "[FAILED] GOFMT_COMMAND"
		if [ $IS_GO_TIP == false ]; then
			exit $STATUS
		fi
	else
		echo "[OK] GOFMT_COMMAND passed!"
	fi
fi

echo "Checking govet..."
if [ $IS_GO_TIP == false ]; then
	vetRes=$(go vet $TEST)
	if [ -n "${vetRes}" ]; then
		echo -e "govet checking failed:\n${vetRes}"
		exit 255
	else
		echo "[OK] govet passed!"
	fi
else
	GOVET_COMMAND="go vet ${TEST}"	
	$GOVET_COMMAND || STATUS=$?
	if [ $STATUS -ne 0 ]; then
		echo "[FAILED] GOVET_COMMAND"
		if [ $IS_GO_TIP == false ]; then
			exit $STATUS
		fi
	else
		echo "[OK] GOVET_COMMAND passed!"
	fi
fi

echo "Checking govet -shadow..."
if [ $IS_GO_TIP == false ]; then
	for path in $FMT; do
		vetRes=$(go tool vet -shadow ${path})
		if [ -n "${vetRes}" ]; then
			echo -e "govet checking ${path} failed:\n${vetRes}"
			exit 255
		else
			echo "[OK] govet -shadow passed at ${path}"
		fi
	done
else
	for path in $FMT; do
		GOVET_SHADOW_COMMAND="go tool vet -shadow ${path}"	
		$GOVET_SHADOW_COMMAND || STATUS=$?
		if [ $STATUS -ne 0 ]; then
			echo "[FAILED] GOVET_SHADOW_COMMAND at ${path}"
			if [ $IS_GO_TIP == false ]; then
				exit $STATUS
			fi
		else
			echo "[OK] GOVET_SHADOW_COMMAND passed at ${path}"
		fi
	done
fi

echo "Checking for license header..."
licRes=$(for file in $(find . -type f -iname '*.go' ! -path './Godeps/*'); do
		head -n3 "${file}" | grep -Eq "(Copyright|generated|GENERATED)" || echo -e "  ${file}"
	done;)
if [ -n "${licRes}" ]; then 
	echo -e "license header checking failed:\n${licRes}"
	exit 255
fi

echo "Success"
